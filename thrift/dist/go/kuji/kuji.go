// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package kuji

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - Code
//  - Message
//  - Data
type Response struct {
  Code int64 `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
  Data *Data `thrift:"data,3" db:"data" json:"data"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetCode() int64 {
  return p.Code
}

func (p *Response) GetMessage() string {
  return p.Message
}
var Response_Data_DEFAULT *Data
func (p *Response) GetData() *Data {
  if !p.IsSetData() {
    return Response_Data_DEFAULT
  }
return p.Data
}
func (p *Response) IsSetData() bool {
  return p.Data != nil
}

func (p *Response) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Response)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *Response)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *Response)  ReadField3(iprot thrift.TProtocol) error {
  p.Data = &Data{}
  if err := p.Data.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *Response) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI64(int64(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *Response) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *Response) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := p.Data.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

// Attributes:
//  - ID
//  - IDStr
type Data struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  IDStr string `thrift:"id_str,2" db:"id_str" json:"id_str"`
}

func NewData() *Data {
  return &Data{}
}


func (p *Data) GetID() int64 {
  return p.ID
}

func (p *Data) GetIDStr() string {
  return p.IDStr
}
func (p *Data) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Data)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Data)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IDStr = v
}
  return nil
}

func (p *Data) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Data"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Data) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Data) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id_str", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id_str: ", p), err) }
  if err := oprot.WriteString(string(p.IDStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id_str (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id_str: ", p), err) }
  return err
}

func (p *Data) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Data(%+v)", *p)
}

// Attributes:
//  - Key
//  - Candidates
type ReqCandidates struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Candidates *KujiCandidates `thrift:"candidates,2" db:"candidates" json:"candidates"`
}

func NewReqCandidates() *ReqCandidates {
  return &ReqCandidates{}
}


func (p *ReqCandidates) GetKey() string {
  return p.Key
}
var ReqCandidates_Candidates_DEFAULT *KujiCandidates
func (p *ReqCandidates) GetCandidates() *KujiCandidates {
  if !p.IsSetCandidates() {
    return ReqCandidates_Candidates_DEFAULT
  }
return p.Candidates
}
func (p *ReqCandidates) IsSetCandidates() bool {
  return p.Candidates != nil
}

func (p *ReqCandidates) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReqCandidates)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ReqCandidates)  ReadField2(iprot thrift.TProtocol) error {
  p.Candidates = &KujiCandidates{}
  if err := p.Candidates.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Candidates), err)
  }
  return nil
}

func (p *ReqCandidates) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReqCandidates"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqCandidates) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *ReqCandidates) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("candidates", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:candidates: ", p), err) }
  if err := p.Candidates.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Candidates), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:candidates: ", p), err) }
  return err
}

func (p *ReqCandidates) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqCandidates(%+v)", *p)
}

// Attributes:
//  - Key
type ReqPickOneByKey struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewReqPickOneByKey() *ReqPickOneByKey {
  return &ReqPickOneByKey{}
}


func (p *ReqPickOneByKey) GetKey() string {
  return p.Key
}
func (p *ReqPickOneByKey) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReqPickOneByKey)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ReqPickOneByKey) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReqPickOneByKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqPickOneByKey) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *ReqPickOneByKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqPickOneByKey(%+v)", *p)
}

// Attributes:
//  - Key
//  - Index
type ReqPickOneByKeyAndIndex struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Index int64 `thrift:"index,2" db:"index" json:"index"`
}

func NewReqPickOneByKeyAndIndex() *ReqPickOneByKeyAndIndex {
  return &ReqPickOneByKeyAndIndex{}
}


func (p *ReqPickOneByKeyAndIndex) GetKey() string {
  return p.Key
}

func (p *ReqPickOneByKeyAndIndex) GetIndex() int64 {
  return p.Index
}
func (p *ReqPickOneByKeyAndIndex) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReqPickOneByKeyAndIndex)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ReqPickOneByKeyAndIndex)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Index = v
}
  return nil
}

func (p *ReqPickOneByKeyAndIndex) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReqPickOneByKeyAndIndex"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReqPickOneByKeyAndIndex) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *ReqPickOneByKeyAndIndex) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("index", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:index: ", p), err) }
  if err := oprot.WriteI64(int64(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:index: ", p), err) }
  return err
}

func (p *ReqPickOneByKeyAndIndex) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReqPickOneByKeyAndIndex(%+v)", *p)
}

// Attributes:
//  - ID
//  - Weight
type KujiCandidate struct {
  ID int64 `thrift:"id,1" db:"id" json:"id"`
  Weight int64 `thrift:"weight,2" db:"weight" json:"weight"`
}

func NewKujiCandidate() *KujiCandidate {
  return &KujiCandidate{}
}


func (p *KujiCandidate) GetID() int64 {
  return p.ID
}

func (p *KujiCandidate) GetWeight() int64 {
  return p.Weight
}
func (p *KujiCandidate) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KujiCandidate)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *KujiCandidate)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Weight = v
}
  return nil
}

func (p *KujiCandidate) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("KujiCandidate"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KujiCandidate) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *KujiCandidate) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("weight", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:weight: ", p), err) }
  if err := oprot.WriteI64(int64(p.Weight)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.weight (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:weight: ", p), err) }
  return err
}

func (p *KujiCandidate) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KujiCandidate(%+v)", *p)
}

// Attributes:
//  - Candidates
type KujiCandidates struct {
  Candidates []*KujiCandidate `thrift:"candidates,1" db:"candidates" json:"candidates"`
}

func NewKujiCandidates() *KujiCandidates {
  return &KujiCandidates{}
}


func (p *KujiCandidates) GetCandidates() []*KujiCandidate {
  return p.Candidates
}
func (p *KujiCandidates) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KujiCandidates)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*KujiCandidate, 0, size)
  p.Candidates =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &KujiCandidate{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Candidates = append(p.Candidates, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *KujiCandidates) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("KujiCandidates"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KujiCandidates) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("candidates", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:candidates: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Candidates)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Candidates {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:candidates: ", p), err) }
  return err
}

func (p *KujiCandidates) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KujiCandidates(%+v)", *p)
}

type KujiService interface {
  // Parameters:
  //  - Req
  ThRegisterCandidatesWithKey(req *ReqCandidates) (r *Response, err error)
  // Parameters:
  //  - Req
  ThPickOneByKey(req *ReqPickOneByKey) (r *Response, err error)
  // Parameters:
  //  - Req
  ThPickOneByKeyAndIndex(req *ReqPickOneByKeyAndIndex) (r *Response, err error)
  // Parameters:
  //  - Req
  ThPickAndDeleteOneByKey(req *ReqPickOneByKey) (r *Response, err error)
}

type KujiServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewKujiServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *KujiServiceClient {
  return &KujiServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewKujiServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *KujiServiceClient {
  return &KujiServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - Req
func (p *KujiServiceClient) ThRegisterCandidatesWithKey(req *ReqCandidates) (r *Response, err error) {
  if err = p.sendThRegisterCandidatesWithKey(req); err != nil { return }
  return p.recvThRegisterCandidatesWithKey()
}

func (p *KujiServiceClient) sendThRegisterCandidatesWithKey(req *ReqCandidates)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ThRegisterCandidatesWithKey", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := KujiServiceThRegisterCandidatesWithKeyArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *KujiServiceClient) recvThRegisterCandidatesWithKey() (value *Response, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "ThRegisterCandidatesWithKey" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ThRegisterCandidatesWithKey failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ThRegisterCandidatesWithKey failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error1 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error2 error
    error2, err = error1.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error2
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ThRegisterCandidatesWithKey failed: invalid message type")
    return
  }
  result := KujiServiceThRegisterCandidatesWithKeyResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *KujiServiceClient) ThPickOneByKey(req *ReqPickOneByKey) (r *Response, err error) {
  if err = p.sendThPickOneByKey(req); err != nil { return }
  return p.recvThPickOneByKey()
}

func (p *KujiServiceClient) sendThPickOneByKey(req *ReqPickOneByKey)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ThPickOneByKey", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := KujiServiceThPickOneByKeyArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *KujiServiceClient) recvThPickOneByKey() (value *Response, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "ThPickOneByKey" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ThPickOneByKey failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ThPickOneByKey failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error4 error
    error4, err = error3.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error4
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ThPickOneByKey failed: invalid message type")
    return
  }
  result := KujiServiceThPickOneByKeyResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *KujiServiceClient) ThPickOneByKeyAndIndex(req *ReqPickOneByKeyAndIndex) (r *Response, err error) {
  if err = p.sendThPickOneByKeyAndIndex(req); err != nil { return }
  return p.recvThPickOneByKeyAndIndex()
}

func (p *KujiServiceClient) sendThPickOneByKeyAndIndex(req *ReqPickOneByKeyAndIndex)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ThPickOneByKeyAndIndex", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := KujiServiceThPickOneByKeyAndIndexArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *KujiServiceClient) recvThPickOneByKeyAndIndex() (value *Response, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "ThPickOneByKeyAndIndex" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ThPickOneByKeyAndIndex failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ThPickOneByKeyAndIndex failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error5 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error6 error
    error6, err = error5.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error6
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ThPickOneByKeyAndIndex failed: invalid message type")
    return
  }
  result := KujiServiceThPickOneByKeyAndIndexResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - Req
func (p *KujiServiceClient) ThPickAndDeleteOneByKey(req *ReqPickOneByKey) (r *Response, err error) {
  if err = p.sendThPickAndDeleteOneByKey(req); err != nil { return }
  return p.recvThPickAndDeleteOneByKey()
}

func (p *KujiServiceClient) sendThPickAndDeleteOneByKey(req *ReqPickOneByKey)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("ThPickAndDeleteOneByKey", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := KujiServiceThPickAndDeleteOneByKeyArgs{
  Req : req,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *KujiServiceClient) recvThPickAndDeleteOneByKey() (value *Response, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "ThPickAndDeleteOneByKey" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ThPickAndDeleteOneByKey failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ThPickAndDeleteOneByKey failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error7 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error8 error
    error8, err = error7.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error8
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ThPickAndDeleteOneByKey failed: invalid message type")
    return
  }
  result := KujiServiceThPickAndDeleteOneByKeyResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type KujiServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler KujiService
}

func (p *KujiServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *KujiServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *KujiServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewKujiServiceProcessor(handler KujiService) *KujiServiceProcessor {

  self9 := &KujiServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self9.processorMap["ThRegisterCandidatesWithKey"] = &kujiServiceProcessorThRegisterCandidatesWithKey{handler:handler}
  self9.processorMap["ThPickOneByKey"] = &kujiServiceProcessorThPickOneByKey{handler:handler}
  self9.processorMap["ThPickOneByKeyAndIndex"] = &kujiServiceProcessorThPickOneByKeyAndIndex{handler:handler}
  self9.processorMap["ThPickAndDeleteOneByKey"] = &kujiServiceProcessorThPickAndDeleteOneByKey{handler:handler}
return self9
}

func (p *KujiServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x10 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x10.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x10

}

type kujiServiceProcessorThRegisterCandidatesWithKey struct {
  handler KujiService
}

func (p *kujiServiceProcessorThRegisterCandidatesWithKey) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := KujiServiceThRegisterCandidatesWithKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ThRegisterCandidatesWithKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := KujiServiceThRegisterCandidatesWithKeyResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.ThRegisterCandidatesWithKey(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ThRegisterCandidatesWithKey: " + err2.Error())
    oprot.WriteMessageBegin("ThRegisterCandidatesWithKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ThRegisterCandidatesWithKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type kujiServiceProcessorThPickOneByKey struct {
  handler KujiService
}

func (p *kujiServiceProcessorThPickOneByKey) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := KujiServiceThPickOneByKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ThPickOneByKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := KujiServiceThPickOneByKeyResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.ThPickOneByKey(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ThPickOneByKey: " + err2.Error())
    oprot.WriteMessageBegin("ThPickOneByKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ThPickOneByKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type kujiServiceProcessorThPickOneByKeyAndIndex struct {
  handler KujiService
}

func (p *kujiServiceProcessorThPickOneByKeyAndIndex) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := KujiServiceThPickOneByKeyAndIndexArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ThPickOneByKeyAndIndex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := KujiServiceThPickOneByKeyAndIndexResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.ThPickOneByKeyAndIndex(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ThPickOneByKeyAndIndex: " + err2.Error())
    oprot.WriteMessageBegin("ThPickOneByKeyAndIndex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ThPickOneByKeyAndIndex", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type kujiServiceProcessorThPickAndDeleteOneByKey struct {
  handler KujiService
}

func (p *kujiServiceProcessorThPickAndDeleteOneByKey) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := KujiServiceThPickAndDeleteOneByKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ThPickAndDeleteOneByKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := KujiServiceThPickAndDeleteOneByKeyResult{}
var retval *Response
  var err2 error
  if retval, err2 = p.handler.ThPickAndDeleteOneByKey(args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ThPickAndDeleteOneByKey: " + err2.Error())
    oprot.WriteMessageBegin("ThPickAndDeleteOneByKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("ThPickAndDeleteOneByKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type KujiServiceThRegisterCandidatesWithKeyArgs struct {
  Req *ReqCandidates `thrift:"req,1" db:"req" json:"req"`
}

func NewKujiServiceThRegisterCandidatesWithKeyArgs() *KujiServiceThRegisterCandidatesWithKeyArgs {
  return &KujiServiceThRegisterCandidatesWithKeyArgs{}
}

var KujiServiceThRegisterCandidatesWithKeyArgs_Req_DEFAULT *ReqCandidates
func (p *KujiServiceThRegisterCandidatesWithKeyArgs) GetReq() *ReqCandidates {
  if !p.IsSetReq() {
    return KujiServiceThRegisterCandidatesWithKeyArgs_Req_DEFAULT
  }
return p.Req
}
func (p *KujiServiceThRegisterCandidatesWithKeyArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *KujiServiceThRegisterCandidatesWithKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KujiServiceThRegisterCandidatesWithKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ReqCandidates{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *KujiServiceThRegisterCandidatesWithKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThRegisterCandidatesWithKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KujiServiceThRegisterCandidatesWithKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *KujiServiceThRegisterCandidatesWithKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KujiServiceThRegisterCandidatesWithKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type KujiServiceThRegisterCandidatesWithKeyResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewKujiServiceThRegisterCandidatesWithKeyResult() *KujiServiceThRegisterCandidatesWithKeyResult {
  return &KujiServiceThRegisterCandidatesWithKeyResult{}
}

var KujiServiceThRegisterCandidatesWithKeyResult_Success_DEFAULT *Response
func (p *KujiServiceThRegisterCandidatesWithKeyResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return KujiServiceThRegisterCandidatesWithKeyResult_Success_DEFAULT
  }
return p.Success
}
func (p *KujiServiceThRegisterCandidatesWithKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *KujiServiceThRegisterCandidatesWithKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KujiServiceThRegisterCandidatesWithKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *KujiServiceThRegisterCandidatesWithKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThRegisterCandidatesWithKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KujiServiceThRegisterCandidatesWithKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *KujiServiceThRegisterCandidatesWithKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KujiServiceThRegisterCandidatesWithKeyResult(%+v)", *p)
}

// Attributes:
//  - Req
type KujiServiceThPickOneByKeyArgs struct {
  Req *ReqPickOneByKey `thrift:"req,1" db:"req" json:"req"`
}

func NewKujiServiceThPickOneByKeyArgs() *KujiServiceThPickOneByKeyArgs {
  return &KujiServiceThPickOneByKeyArgs{}
}

var KujiServiceThPickOneByKeyArgs_Req_DEFAULT *ReqPickOneByKey
func (p *KujiServiceThPickOneByKeyArgs) GetReq() *ReqPickOneByKey {
  if !p.IsSetReq() {
    return KujiServiceThPickOneByKeyArgs_Req_DEFAULT
  }
return p.Req
}
func (p *KujiServiceThPickOneByKeyArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *KujiServiceThPickOneByKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KujiServiceThPickOneByKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ReqPickOneByKey{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *KujiServiceThPickOneByKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThPickOneByKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KujiServiceThPickOneByKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *KujiServiceThPickOneByKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KujiServiceThPickOneByKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type KujiServiceThPickOneByKeyResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewKujiServiceThPickOneByKeyResult() *KujiServiceThPickOneByKeyResult {
  return &KujiServiceThPickOneByKeyResult{}
}

var KujiServiceThPickOneByKeyResult_Success_DEFAULT *Response
func (p *KujiServiceThPickOneByKeyResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return KujiServiceThPickOneByKeyResult_Success_DEFAULT
  }
return p.Success
}
func (p *KujiServiceThPickOneByKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *KujiServiceThPickOneByKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KujiServiceThPickOneByKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *KujiServiceThPickOneByKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThPickOneByKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KujiServiceThPickOneByKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *KujiServiceThPickOneByKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KujiServiceThPickOneByKeyResult(%+v)", *p)
}

// Attributes:
//  - Req
type KujiServiceThPickOneByKeyAndIndexArgs struct {
  Req *ReqPickOneByKeyAndIndex `thrift:"req,1" db:"req" json:"req"`
}

func NewKujiServiceThPickOneByKeyAndIndexArgs() *KujiServiceThPickOneByKeyAndIndexArgs {
  return &KujiServiceThPickOneByKeyAndIndexArgs{}
}

var KujiServiceThPickOneByKeyAndIndexArgs_Req_DEFAULT *ReqPickOneByKeyAndIndex
func (p *KujiServiceThPickOneByKeyAndIndexArgs) GetReq() *ReqPickOneByKeyAndIndex {
  if !p.IsSetReq() {
    return KujiServiceThPickOneByKeyAndIndexArgs_Req_DEFAULT
  }
return p.Req
}
func (p *KujiServiceThPickOneByKeyAndIndexArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *KujiServiceThPickOneByKeyAndIndexArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KujiServiceThPickOneByKeyAndIndexArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ReqPickOneByKeyAndIndex{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *KujiServiceThPickOneByKeyAndIndexArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThPickOneByKeyAndIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KujiServiceThPickOneByKeyAndIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *KujiServiceThPickOneByKeyAndIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KujiServiceThPickOneByKeyAndIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type KujiServiceThPickOneByKeyAndIndexResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewKujiServiceThPickOneByKeyAndIndexResult() *KujiServiceThPickOneByKeyAndIndexResult {
  return &KujiServiceThPickOneByKeyAndIndexResult{}
}

var KujiServiceThPickOneByKeyAndIndexResult_Success_DEFAULT *Response
func (p *KujiServiceThPickOneByKeyAndIndexResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return KujiServiceThPickOneByKeyAndIndexResult_Success_DEFAULT
  }
return p.Success
}
func (p *KujiServiceThPickOneByKeyAndIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *KujiServiceThPickOneByKeyAndIndexResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KujiServiceThPickOneByKeyAndIndexResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *KujiServiceThPickOneByKeyAndIndexResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThPickOneByKeyAndIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KujiServiceThPickOneByKeyAndIndexResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *KujiServiceThPickOneByKeyAndIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KujiServiceThPickOneByKeyAndIndexResult(%+v)", *p)
}

// Attributes:
//  - Req
type KujiServiceThPickAndDeleteOneByKeyArgs struct {
  Req *ReqPickOneByKey `thrift:"req,1" db:"req" json:"req"`
}

func NewKujiServiceThPickAndDeleteOneByKeyArgs() *KujiServiceThPickAndDeleteOneByKeyArgs {
  return &KujiServiceThPickAndDeleteOneByKeyArgs{}
}

var KujiServiceThPickAndDeleteOneByKeyArgs_Req_DEFAULT *ReqPickOneByKey
func (p *KujiServiceThPickAndDeleteOneByKeyArgs) GetReq() *ReqPickOneByKey {
  if !p.IsSetReq() {
    return KujiServiceThPickAndDeleteOneByKeyArgs_Req_DEFAULT
  }
return p.Req
}
func (p *KujiServiceThPickAndDeleteOneByKeyArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *KujiServiceThPickAndDeleteOneByKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KujiServiceThPickAndDeleteOneByKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &ReqPickOneByKey{}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *KujiServiceThPickAndDeleteOneByKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThPickAndDeleteOneByKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KujiServiceThPickAndDeleteOneByKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *KujiServiceThPickAndDeleteOneByKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KujiServiceThPickAndDeleteOneByKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type KujiServiceThPickAndDeleteOneByKeyResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewKujiServiceThPickAndDeleteOneByKeyResult() *KujiServiceThPickAndDeleteOneByKeyResult {
  return &KujiServiceThPickAndDeleteOneByKeyResult{}
}

var KujiServiceThPickAndDeleteOneByKeyResult_Success_DEFAULT *Response
func (p *KujiServiceThPickAndDeleteOneByKeyResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return KujiServiceThPickAndDeleteOneByKeyResult_Success_DEFAULT
  }
return p.Success
}
func (p *KujiServiceThPickAndDeleteOneByKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *KujiServiceThPickAndDeleteOneByKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *KujiServiceThPickAndDeleteOneByKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *KujiServiceThPickAndDeleteOneByKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ThPickAndDeleteOneByKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *KujiServiceThPickAndDeleteOneByKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *KujiServiceThPickAndDeleteOneByKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("KujiServiceThPickAndDeleteOneByKeyResult(%+v)", *p)
}


